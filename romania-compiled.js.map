{"version":3,"sources":["romania.js"],"names":[],"mappings":"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","file":"romania-compiled.js","sourcesContent":["\"use strict\";\n\n// Map URL:\n// https://i.imgur.com/rAe8QIy.jpg\n\nlet cities = [\n    { name: \"Oradea\",\n        nearby: [\n            {\n                name: \"Zerind\",\n                cost: 71,\n                h: 374\n            },\n            {\n                name: \"Sibiu\",\n                cost: 151,\n                h: 253\n            }\n        ]\n    },\n    { name: \"Zerind\",\n        nearby: [\n            {\n                name: \"Oradea\",\n                cost: 71,\n                h: 380\n            },\n            {\n                name: \"Arad\",\n                cost: 75,\n                h: 366\n            }\n        ]\n    },\n    { name: \"Arad\",\n        nearby: [\n            {\n                name: \"Zerind\",\n                cost: 75,\n                h: 374\n            },\n            {\n                name: \"Sibiu\",\n                cost: 140,\n                h: 253\n            },\n            {\n                name: \"Timisoara\",\n                cost: 118,\n                h: 329\n            }\n        ]\n    },\n    { name: \"Timisoara\",\n        nearby: [\n            {\n                name: \"Arad\",\n                cost: 118,\n                h: 366\n            },\n            {\n                name: \"Lugoj\",\n                cost: 111,\n                h: 244\n            }\n        ]\n    },\n    { name: \"Lugoj\",\n        nearby: [\n            {\n                name: \"Timisoara\",\n                cost: 111,\n                h: 329\n            },\n            {\n                name: \"Mehadia\",\n                cost: 70,\n                h: 241\n            }\n        ]\n    },\n    { name: \"Mehadia\",\n        nearby: [\n            {\n                name: \"Lugoj\",\n                cost: 70,\n                h: 244\n            },\n            {\n                name: \"Drobeta\",\n                cost: 75,\n                h: 242\n            }\n        ]\n    },\n    { name: \"Drobeta\",\n        nearby: [\n            {\n                name: \"Mehadia\",\n                cost: 75,\n                h: 241\n            },\n            {\n                name: \"Craiova\",\n                cost: 120,\n                h: 160\n            }\n        ]\n    },\n    { name: \"Craiova\",\n        nearby: [\n            {\n                name: \"Drobeta\",\n                cost: 120,\n                h: 242\n            },\n            {\n                name: \"Pitesti\",\n                cost: 138,\n                h: 100\n            },\n            {\n                name: \"Rimnicu Vilcea\",\n                cost: 146,\n                h: 193\n            }\n        ]\n    },\n    { name: \"Rimnicu Vilcea\",\n        nearby: [\n            {\n                name: \"Craiova\",\n                cost: 146,\n                h: 160\n            },\n            {\n                name: \"Pitesti\",\n                cost: 97,\n                h: 100\n            },\n            {\n                name: \"Sibiu\",\n                cost: 80,\n                h: 253\n            }\n        ]\n    },\n    { name: \"Pitesti\",\n        nearby: [\n            {\n                name: \"Craiova\",\n                cost: 138,\n                h: 160\n            },\n            {\n                name: \"Rimnicu Vilcea\",\n                cost: 97,\n                h: 193\n            },\n            {\n                name: \"Bucharest\",\n                cost: 101,\n                h: 0\n            }\n        ]\n    },\n    { name: \"Sibiu\",\n        nearby: [\n            {\n                name: \"Oradea\",\n                cost: 151,\n                h: 380\n            },\n            {\n                name: \"Arad\",\n                cost: 140,\n                h: 366\n            },\n            {\n                name: \"Fagaras\",\n                cost: 99,\n                h: 176\n            },\n            {\n                name: \"Rimnicu Vilcea\",\n                cost: 80,\n                h: 193\n            }\n        ]\n    },\n    { name: \"Fagaras\",\n        nearby: [\n            {\n                name: \"Sibiu\",\n                cost: 99,\n                h: 253\n            },\n            {\n                name: \"Bucharest\",\n                cost: 211,\n                h: 0\n            }\n        ]\n    },\n    { name: \"Bucharest\",\n        nearby: [\n            {\n                name: \"Pitesti\",\n                cost: 101,\n                h: 100\n            },\n            {\n                name: \"Giurgiu\",\n                cost: 90,\n                h: 77\n            },\n            {\n                name: \"Urziceni\",\n                cost: 85,\n                h: 80\n            },\n            {\n                name: \"Fagaras\",\n                cost: 211,\n                h: 176\n            }\n        ]\n    },\n    { name: \"Giurgiu\",\n        nearby: [\n            {\n                name: \"Bucharest\",\n                cost: 90,\n                h: 0\n            }\n        ]\n    },\n    { name: \"Urziceni\",\n        nearby: [\n            {\n                name: \"Bucharest\",\n                cost: 85,\n                h: 0\n            },\n            {\n                name: \"Hirsova\",\n                cost: 98,\n                h: 151\n            },\n            {\n                name: \"Vaslui\",\n                cost: 142,\n                h: 199\n            }\n        ]\n    },\n    { name: \"Eforie\",\n        nearby: [\n            {\n                name: \"Hirsova\",\n                cost: 86,\n                h: 151\n            }\n        ]\n    },\n    { name: \"Vaslui\",\n        nearby: [\n            {\n                name: \"Urziceni\",\n                cost: 142,\n                h: 80\n            },\n            {\n                name: \"Iasi\",\n                cost: 92,\n                h: 226\n            }\n        ]\n    },\n    { name: \"Hirsova\",\n        nearby: [\n            {\n                name: \"Urziceni\",\n                cost: 98,\n                h: 80\n            },\n            {\n                name: \"Eforie\",\n                cost: 86,\n                h: 161\n            }\n        ]\n    },\n    { name: \"Iasi\",\n        nearby: [\n            {\n                name: \"Vaslui\",\n                cost: 92,\n                h: 199\n            },\n            {\n                name: \"Neamt\",\n                cost: 87,\n                h: 234\n            }\n        ]\n    },\n    { name: \"Neamt\",\n        nearby: [\n            {\n                name: \"Iasi\",\n                cost: 87,\n                h: 226\n            }\n        ]\n    }\n];\n\n// Implementing Romania as a Map()\n\nlet Romania = new Map();\n\nfor (let i = 0; i < cities.length; i++) {\n    Romania.set(cities[i].name, cities[i].nearby)\n}\n\n// searchNodes are created during the algorithm's search.\n// this.action = the action taken to reach this city from the previous\n//     search node\n// this.state = city name\n// this.parent = the previous city in the search\n\nclass searchNode {\n    constructor(action, state, parent) {\n        this.action = action;\n        this.state = state;\n        this.parent = parent;\n    }\n\n    // Returns a list of pairs corresponding to\n    // the path starting at the top (root) of the tree.\n    path() {\n        if (this.parent === null) {\n            return [this.state, this.action];\n        } else {\n            return this.parent.path() + \" -> \" + [this.state, this.action.cost];\n        }\n    }\n\n    pathCost() {\n        if (this.parent === null) {\n            return 0;\n        } else {\n            return this.parent.pathCost() + this.action.cost;\n        }\n    }\n\n    // Returns true if the state occurs anywhere in the path\n    // from the root to the node.\n    inPath(findState) {\n        if (findState == this.state) {\n            return true;\n        }\n        else if (this.parent == null) {\n            return false;\n        }\n        else {\n            return this.parent.inPath(findState);\n        }\n    }\n}\n\n// Uninformed Search Algorithms\n// * Breadth-first Search\n// * Depth-first Search\n// * Uniform Cost Search\n\nfunction breadthFirstSearch(initialState, goalTest, actions, successor) {\n    // The fringe is a Queue\n    // Actions other than push() and shift() are prohibited.\n    let fringe = [];\n    if (goalTest(initialState)) {\n        console.log(\"Initial state is the goal state.\");\n        return [initialState];\n    }\n\n    // Add the initialState to the fringe.\n    fringe.push(new searchNode(null, initialState, null));\n    let expanded = [];\n    while (fringe.length !== 0) {\n        console.log(\"Fringe: \" + fringe.map(function(city){\n                return city.state;\n            }));\n\n        // Pop an element out of the queue to expand.\n        let parent = fringe.shift();\n        console.log(\"Popped: \", parent.state);\n        let newChildStates = [];\n\n        // Child states of the current node\n        let actionsList = actions(parent.state);\n        console.log(\"Found \" + actionsList.length + \" successors of \" + parent.state + \" : \"\n            + actionsList.map(function(item){\n                return item.name;\n            }));\n\n        // Add the node to the expanded list to prevent re-expansion.\n        expanded.push(parent.state);\n        console.log(\"Expanded list: \", expanded);\n        console.log(\"\\n\");\n\n        // Create successors of each node and push them onto the fringe.\n        for (let i = 0; i < actionsList.length; i++) {\n            let newS = successor(parent.state, actionsList[i]);\n            let newN = new searchNode(actionsList[i], newS, parent);\n\n            // If the goal is found,\n            // returns the path to the goal.\n            if (goalTest(newS)) {\n                console.log(\"FOUND GOAL!\", newS);\n                return newN.path() + \" with path cost \" + newN.pathCost();\n            }\n\n            // If the successor is already expanded,\n            // don't add it to the fringe.\n            else if (expanded.indexOf(newS) !== -1) {\n                console.log(\"Successor \" + newS + \" of \" + parent.state + \" already expanded.\");\n                console.log(\"Not adding \" + newS + \" to the fringe.\");\n                console.log(\"\\n\");\n            }\n\n            // If the successor is already in the fringe,\n            // don't add it to the fringe again.\n            else if (fringe.map(function(item){return item.state}).indexOf(newN.state) !== -1) {\n                console.log(newS + \" is already in the fringe.\");\n            }\n\n            // Push new successors to the fringe.\n            else {\n                console.log(\"Discovered \" + newN.state + \" with step cost \"\n                    + actionsList[i].cost + \" from \" + parent.state);\n                console.log(\"Pushing to fringe: \" + newS);\n                newChildStates.push(newS);\n                fringe.push(newN);\n                console.log(\"Path: \", newN.path());\n                console.log(\"Current fringe: \" + fringe.map(function(city){\n                        return city.state;\n                    }));\n                console.log(\"\\n\");\n            }\n        }\n    }\n}\n\nfunction depthFirstSearch(initialState, goalTest, actions, successor) {\n    // The fringe is a Stack\n    // Actions other than unshift() and shift() are prohibited.\n    let fringe = [];\n    if (goalTest(initialState)) {\n        console.log(\"Initial state is the goal state.\");\n        return [initialState];\n    }\n\n    // Add the initialState to the fringe.\n    fringe.push(new searchNode(null, initialState, null));\n    let expanded = [];\n    while (fringe.length !== 0) {\n        console.log(\"Fringe: \" + fringe.map(function(city){\n                return city.state;\n            }));\n\n        // Pop an element out of the queue to expand.\n        let parent = fringe.shift();\n        console.log(\"Popped: \", parent.state);\n        let newChildStates = [];\n\n        // Child states of the current node\n        let actionsList = actions(parent.state);\n        console.log(\"Found \" + actionsList.length + \" successors of \" + parent.state + \" : \"\n            + actionsList.map(function(item){\n                return item.name;\n            }));\n\n        // Add the node to the expanded list to prevent re-expansion.\n        expanded.push(parent.state);\n        console.log(\"Expanded list: \", expanded);\n        console.log(\"\\n\");\n\n        // Create successors of each node and push them onto the fringe.\n        for (let i = 0; i < actionsList.length; i++) {\n            let newS = successor(parent.state, actionsList[i]);\n            let newN = new searchNode(actionsList[i], newS, parent);\n\n            // If the goal is found,\n            // returns the path to the goal.\n            if (goalTest(newS)) {\n                console.log(\"FOUND GOAL!\", newS);\n                return newN.path() + \" with path cost \" + newN.pathCost();\n            }\n\n            // If the successor is already expanded,\n            // don't add it to the fringe.\n            else if (expanded.indexOf(newS) !== -1) {\n                console.log(\"Successor \" + newS + \" of \" + parent.state + \" already expanded.\");\n                console.log(\"Not adding \" + newS + \" to the fringe.\");\n                console.log(\"\\n\");\n            }\n\n            // If the successor is already in the fringe,\n            // don't add it to the fringe again.\n            else if (fringe.map(function(item){return item.state}).indexOf(newN.state) !== -1) {\n                console.log(newS + \" is already in the fringe.\");\n            }\n\n            // Push new successors to the fringe.\n            else {\n                console.log(\"Discovered \" + newN.state + \" with step cost \"\n                    + actionsList[i].cost + \" from \" + parent.state);\n                console.log(\"Pushing to fringe: \" + newS);\n                newChildStates.push(newS);\n                fringe.unshift(newN);\n                console.log(\"Path: \", newN.path());\n                console.log(\"Current fringe: \" + fringe.map(function(city){\n                        return city.state;\n                    }));\n                console.log(\"\\n\");\n            }\n        }\n    }\n}\n\n// TODO\n// Implement a priority queue for Uniform Cost Search\n\nfunction uniformCostSearch(initialState, goalTest, actions, successor) {\n    // The fringe is a Priority Queue\n    // Actions other than shift() and enqueue() are prohibited.\n    let fringe = [];\n    if (goalTest(initialState)) {\n        console.log(\"Initial state is the goal state.\");\n        return [initialState];\n    }\n\n    fringe.enqueue = function(item) {\n        let added = false;\n        for (let i = 0; i < fringe.length; i++) {\n            console.log(\"ITEM: \", fringe[i].state);\n            console.log(\"COST: \", fringe[i].pathCost());\n            if (item.pathCost() < fringe[i].pathCost()) {\n                fringe.splice(i, 0, item);\n                added = true;\n                return;\n            }\n        }\n\n        if (!added) {\n            fringe.push(item);\n        }\n    };\n\n    // Add the initialState to the fringe.\n    fringe.enqueue(new searchNode(null, initialState, null));\n    let expanded = [];\n    let shortestPath = {state: null, pathCost: null, path: null};\n\n    while (fringe.length !== 0) {\n        console.log(\"Fringe: \" + fringe.map(function(city){\n                return city.state;\n            }));\n\n        // Pop an element out of the queue to expand.\n        let parent = fringe.shift();\n        console.log(\"Popped: \", parent.state);\n        let newChildStates = [];\n\n        // Child states of the current node\n        let actionsList = actions(parent.state);\n        console.log(\"Found \" + actionsList.length + \" successors of \" + parent.state + \" : \"\n            + actionsList.map(function(item){\n                return item.name;\n            }));\n\n        // Add the node to the expanded list to prevent re-expansion.\n        expanded.push(parent.state);\n        console.log(\"Expanded list: \", expanded);\n        console.log(\"\\n\");\n\n        // Create successors of each node and push them onto the fringe.\n        for (let i = 0; i < actionsList.length; i++) {\n            let newS = successor(parent.state, actionsList[i]);\n            let newN = new searchNode(actionsList[i], newS, parent);\n\n            // If the goal is found,\n            // returns the path to the goal.\n            if (goalTest(newS)) {\n                console.log(\"FOUND GOAL!\", newS, \" with path cost \", newN.pathCost());\n                console.log(\"Continuing search to find optimal path.\");\n                if (newN.pathCost() < shortestPath.pathCost || shortestPath.pathCost === null) {\n                    shortestPath.pathCost = newN.pathCost();\n                    shortestPath.path = newN.path();\n                    shortestPath.state = newS;\n                }\n            }\n\n            // If the successor is already expanded,\n            // don't add it to the fringe.\n            else if (expanded.indexOf(newS) !== -1) {\n                console.log(\"Successor \" + newS + \" of \" + parent.state + \" already expanded.\");\n                console.log(\"Not adding \" + newS + \" to the fringe.\");\n                console.log(\"\\n\");\n            }\n\n            // If the successor is already in the fringe,\n            // don't add it to the fringe again.\n            else if (fringe.map(function(item){return item.state}).indexOf(newN.state) !== -1) {\n                console.log(newS + \" is already in the fringe.\");\n            }\n\n            // Push new successors to the fringe.\n            else {\n                console.log(\"Discovered \" + newN.state + \" with step cost \"\n                    + actionsList[i].cost + \" from \" + parent.state);\n                console.log(\"Pushing to fringe: \" + newS);\n                newChildStates.push(newS);\n                fringe.enqueue(newN);\n                console.log(\"Path: \", newN.path());\n                console.log(\"Current fringe: \" + fringe.map(function(city){\n                        return city.state;\n                    }));\n                console.log(\"\\n\");\n            }\n        }\n    }\n\n    if (shortestPath.pathCost === null) {\n        return \"Couldn't find path.\"\n    } else {\n        return \"Optimal path: \" + shortestPath.path + \" with path cost \" + shortestPath.pathCost;\n    }\n}\n\nfunction aStarSearch(initialState, goalTest, actions, successor) {\n    // The fringe is a Priority Queue\n    // Actions other than shift() and enqueue() are prohibited.\n    let fringe = [];\n    if (goalTest(initialState)) {\n        console.log(\"Initial state is the goal state.\");\n        return [initialState];\n    }\n\n    fringe.enqueue = function(item) {\n        let added = false;\n        for (let i = 0; i < fringe.length; i++) {\n            console.log(\"ITEM: \", fringe[i].state);\n            console.log(\"COST: \", fringe[i].pathCost(), \"HEURISTIC COST: \", fringe[i].h, \"TOTAL COST: \", fringe[i].pathCost() + fringe[i].h);\n            if (item.pathCost() + item.h < fringe[i].pathCost()) {\n                fringe.splice(i, 0, item);\n                added = true;\n                return;\n            }\n        }\n\n        if (!added) {\n            fringe.push(item);\n        }\n    };\n\n    // Add the initialState to the fringe.\n    fringe.enqueue(new searchNode(null, initialState, null));\n    let expanded = [];\n    let shortestPath = {state: null, pathCost: null, path: null};\n\n    while (fringe.length !== 0) {\n        console.log(\"Fringe: \" + fringe.map(function(city){\n                return city.state;\n            }));\n\n        // Pop an element out of the queue to expand.\n        let parent = fringe.shift();\n        console.log(\"Popped: \", parent.state);\n        let newChildStates = [];\n\n        // Child states of the current node\n        let actionsList = actions(parent.state);\n        console.log(\"Found \" + actionsList.length + \" successors of \" + parent.state + \" : \"\n            + actionsList.map(function(item){\n                return item.name;\n            }));\n\n        // Add the node to the expanded list to prevent re-expansion.\n        expanded.push(parent.state);\n        console.log(\"Expanded list: \", expanded);\n        console.log(\"\\n\");\n\n        // Create successors of each node and push them onto the fringe.\n        for (let i = 0; i < actionsList.length; i++) {\n            let newS = successor(parent.state, actionsList[i]);\n            let newN = new searchNode(actionsList[i], newS, parent);\n\n            // If the goal is found,\n            // returns the path to the goal.\n            if (goalTest(newS)) {\n                console.log(\"FOUND GOAL!\", newS, \" with path cost \", newN.pathCost());\n                console.log(\"Continuing search to find optimal path.\");\n                if (newN.pathCost() < shortestPath.pathCost || shortestPath.pathCost === null) {\n                    shortestPath.pathCost = newN.pathCost();\n                    shortestPath.path = newN.path();\n                    shortestPath.state = newS;\n                }\n            }\n\n            // If the successor is already expanded,\n            // don't add it to the fringe.\n            else if (expanded.indexOf(newS) !== -1) {\n                console.log(\"Successor \" + newS + \" of \" + parent.state + \" already expanded.\");\n                console.log(\"Not adding \" + newS + \" to the fringe.\");\n                console.log(\"\\n\");\n            }\n\n            // If the successor is already in the fringe,\n            // don't add it to the fringe again.\n            else if (fringe.map(function(item){return item.state}).indexOf(newN.state) !== -1) {\n                console.log(newS + \" is already in the fringe.\");\n            }\n\n            // Push new successors to the fringe.\n            else {\n                console.log(\"Discovered \" + newN.state + \" with step cost \"\n                    + actionsList[i].cost + \" from \" + parent.state);\n                console.log(\"Pushing to fringe: \" + newS);\n                newChildStates.push(newS);\n                fringe.enqueue(newN);\n                console.log(\"Path: \", newN.path());\n                console.log(\"Current fringe: \" + fringe.map(function(city){\n                        return city.state;\n                    }));\n                console.log(\"\\n\");\n            }\n        }\n    }\n\n    if (shortestPath.pathCost === null) {\n        return \"Couldn't find path.\"\n    } else {\n        return \"Optimal path: \" + shortestPath.path + \" with path cost \" + shortestPath.pathCost;\n    }\n}\n\nfunction goalTest(state) {\n    return state === goalCity;\n}\n\nfunction actions(state) {\n    // Returns an array of objects\n    // [{ name: string, cost: integer }, ... ]\n    return Romania.get(state);\n}\n\nfunction successor(state, action) {\n    return action.name;\n}\n\nlet goalCity = null;\nlet startCity = null;\nlet setResult = function(result) {\n    document.getElementById(\"search-result\").textContent = result;\n};\n\nfunction setSearchInput() {\n    let start = document.getElementById(\"start\");\n    let goal = document.getElementById(\"goal\");\n    if (start.value.length > 0 && goal.value.length > 0) {\n        startCity = start.value;\n        goalCity = goal.value;\n    } else {\n        setResult(\"Error: Please enter a city.\");\n    }\n\n}\n\nfunction bfs() {\n    setSearchInput();\n    setResult(breadthFirstSearch(startCity, goalTest, actions, successor));\n}\n\nfunction dfs() {\n    setSearchInput();\n    setResult(depthFirstSearch(startCity, goalTest, actions, successor));\n}\n\nfunction ucs() {\n    setSearchInput();\n    setResult(uniformCostSearch(startCity, goalTest, actions, successor));\n}\n\nfunction astar() {\n    setSearchInput();\n    if (goalCity !== \"Bucharest\") {\n        setResult(\"Error: Heuristic values are only calculated for any start city to Bucharest. Please change the goal city to Bucharest and try again.\");\n    } else {\n        setResult(aStarSearch(startCity, goalTest, actions, successor));\n    }\n}"]}